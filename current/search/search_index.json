{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EO Application Package Editor","text":"<p>Project documentation.</p> <p>The Application Package Editor is a web tool that provides user with an interactive editor for the  Common Workflow Language used for Application Packages. New users that are getting started with  this editor should start by reading with the provided User Manual. It gives many insights about the tool  Graphical User Interface as well as guidelines on how to create your first Application Package.</p> <p>Online version</p> <p>An online version of this documentation is available at https://spaceapplications.github.io/eoepca-ap-editor/</p>"},{"location":"architectural-design/","title":"Architectural Design","text":""},{"location":"architectural-design/#introduction","title":"Introduction","text":"<p>The Application Package Editor has 2 main building blocks which are the frontend and backend as shown in  the Components Overview figure. The frontend manages the users interactions with the editor while  the backend is responsible for managing the Application Packages of the user in their Workspace. The frontend  communicates with the backend though the API that is exposed by the backend. This API allows management  (list, create, update and delete) of the Application Package Versions that are present in the user's Workspace.</p> <p> <p>Components Overview</p> </p>"},{"location":"architectural-design/#frontend","title":"frontend","text":"<p>As mentioned above, the frontend is responsible for managing the user interaction with the editor. Thus, it  provides a Graphical User Interface which:</p> <ul> <li>Is implemented in a form based way using VueJS and bootstrap.</li> <li>Allows uploading / downloading of Application Packages to and from the user's local system.</li> <li>Allows the management of the user Application Packages that are present in the user Workspace. In order to achieve      this, it communicates with the backend in order to open/lock/save/delete Application Packages and their versions.</li> </ul>"},{"location":"architectural-design/#backend","title":"backend","text":"<p>The backend is, on the other hand, responsible for the management the user workspace. It is implemented using the  FastAPI library and expose an API to manage the Application Packages of the user Workspace. It exposes the following API endpoints which are used by the frontend to interact with the user workspace:</p> <p> <p>API Endpoints</p> </p> <p>On the backend the files are stored in a tree structure. Each application is represented by its own directory. All application package versions are stored as individual CWL files in this directory. An example file structure could be the following:</p> <pre><code>\u251c\u2500\u2500 application_package_one\n\u2502   \u2514\u2500\u2500 version_1.cwl\n\u2514\u2500\u2500 a_different_application\n    \u251c\u2500\u2500 version1__locked.cwl\n    \u251c\u2500\u2500 version3.cwl\n    \u251c\u2500\u2500 version4.cwl\n    \u2514\u2500\u2500 version6.cwl\n</code></pre> <p>Locked files are represented on disk with the <code>__locked</code>.</p>"},{"location":"architectural-design/#future-enhancements","title":"Future enhancements","text":"<p>Some features that will be added in the future: - The integration of the Editor as an app for the EOEPCA Applicatio Hub - Integration with the user's EOEPCA workspace by mounting their S3 bucket.</p>"},{"location":"user-manual/","title":"User Manual","text":"<p>Abstract</p> <p>This document is the EO Application Package Editor User Manual. Its purpose is to describe the features and the capabilities supported by the Application Package Editor in order to make it easy to get started with it.</p> Organisation Name Contact SpaceApps Bernard Valentin bernard.valentin@spaceapplications.com SpaceApps Mounir Hafif mounir.hafif@spaceapplications.com SpaceApps Jannes Lathouwers jannes.lathouwers@spaceapplications.com SpaceApps Patrick Laport patrick.laport@spaceapplications.com <p>Online version</p> <p>An online version of this documentation is available at https://eoepca.github.io/eoepca-ap-editor/</p> <p>Abbreviations and Acronyms</p> Abbreviations / Acronyms Definition EO Earth Observation AP Application Package CWL Common Workflow Language GUI Graphical User Interface ESA European Space Agency BP Best Practice OGC Open Geospatial Consortium"},{"location":"user-manual/#introduction","title":"Introduction","text":"<p>This document describes the features and capabilities implemented in the EO Application Package Editor.</p>"},{"location":"user-manual/#general-concepts","title":"General Concepts","text":"<p>The Application Package Editor is an online web based tool for creating EO Application Packages in an interactive manner. The tool allows to create an Application Package and edit its three main parts as defined in the OGC Best Practice for Earth Observation Application Package which are:</p> <ul> <li>Metadata: Additional metadata which provides a minimal amount of     information about the Application Package to encourage correct     citation.</li> <li>Command Line Tool (also called Processing Task): An executable,     non-interactive program that reads some inputs, performs a     computation, and terminates after producing some outputs.</li> <li>Workflow: a process characterized by multiple subprocess steps,     where a step is a CommandLineTool and its outputs can be connected     to the inputs of downstream steps to form a directed acyclic graph.     A workflow may have inputs and produce outputs from the execution of     all of its subprocess steps.</li> </ul> <p>The tool uses a form based interface which is divided according to the three main parts of an Application Package. These forms allow users to:</p> <ul> <li>Enter Metadata for the Application Package by defining the     software version, the authors and contributors, etc.</li> <li>Add Command Line Tool with their required information such as     the executable command, its inputs and outputs with their types as     well as specific requirements that must be met in order to execute     the process.</li> <li>Define the Workflow inputs and outputs with their types as well     as the subprocess steps to be executed with the mapping of their     inputs and outputs.</li> </ul> <p>The tool generates an Application Package that can be stored and versioned in the backend or downloaded as a CWL file. You can also select a stored Application Package version or upload a previously generated one which will automatically fill the editor with the Application Package content allowing further edition of the latter.</p>"},{"location":"user-manual/#application-package-creation-guidelines","title":"Application Package Creation Guidelines","text":"<p>In general, creating a consistent new Application Package can be achieved by following these steps in the editor:</p> <ol> <li>Define all of the processing tasks (Command Line Tool) that will be     executed in the workflow. A processing task is considered complete     when its identifier is defined as well as the command to be executed     with all of its needed inputs, outputs and arguments.</li> <li>Define the inputs of the workflow process. Once it is done, the     steps of the workflow can be added which will use the previously     defined processing tasks with a mapping for their inputs. Finally,     define the outputs of the workflow by mapping them to the outputs of     one or more of its steps.</li> </ol> <p>The metadata of the Application Package can be defined at any moment since the information that is set in it is not used by the Command Line Tool or Workflow parts.</p>"},{"location":"user-manual/#application-package-editor","title":"Application Package Editor","text":""},{"location":"user-manual/#interface-overview","title":"Interface Overview","text":"<p>The Application Package Editor Tool interface is divided in 4 distinct sections with their own purpose as shown in the Editor GUI Overview figure:</p> <ol> <li>Header section: This section includes a Help Menu that provides     users with multiple useful links and features such as guided tours     or Application Package examples.</li> <li>File Management Section: This section provides users with a set     of buttons that allows users to validate and manage the CWL file     generated by the editor. Users here can choose from where to open or     save an Application Package (CWL file) as well as edit the name of     it and its version.</li> <li>Editor Section: This section is the main part of the editor tool     which is responsible for the interactive edition of the Application     Package Editor.</li> <li>Viewer Section: This section is a runtime viewer of the     Application Package generated CWL file that will be saved when using     the File Management Section.</li> </ol> <p> <p>Editor GUI Overview</p></p>"},{"location":"user-manual/#header-section","title":"Header Section","text":"<p>The header section provides a helper menu from which users can change general settings of the Application Package Editor or open documentation, examples and guided tours on how to use the interactive Application Package Editor. The helper menu provide the following actions as can be seen in the Helper Menu figure:</p> <ul> <li>Reset Editor: Reset the editor to a default state without any     Application Package loaded. The user is asked to confirm this action     as it may lead to unsaved changes if an Application Package was     already being edited.</li> <li>Editor Mode Selector: Allow users to choose between Simple and     Advanced mode of the editor. In Advanced mode, the forms of the     editor show additional fields which are normally hidden in Simple     mode as they are not required. Simple mode is the default one as it     makes the interface look simpler and less complex.</li> <li>Manuals &amp; References: Allow users to access useful documentation     about the Application Package Editor such as the User Manuals and     OGC Best Practice for building an EO Application Package.</li> <li>Applications Package Examples: Allow users to open Application     Packages Examples directly in the Editor. Users can use these     examples as a starting template and save them after edition.</li> <li>Guided Tours: Provide users with a set of interactive guided     tours that describe and introduce the three main parts of the     editor: Metadata, Command Line Tool and Workflow.</li> </ul> <p> <p>Helper Menu</p></p>"},{"location":"user-manual/#file-management-section","title":"File Management Section","text":"<p>The file management section provides users with a set of actions to perform on the Application Package CWL file that is generated/edited by the editor. The possible actions are shown in the File Management Action figure.</p> <p> <p>File Management Actions</p></p>"},{"location":"user-manual/#validation","title":"Validation","text":"<p>The Validate button allows users at any moment during the editing of their Application Package to verify that the generated CWL file is valid against the CWL schema and the OGC BP EO Application Package requirements. Note that this validation is also performed each time the users open a new Application Package in the editor.</p> <p>The button and its associated menu allow checking the AP against three levels of requirements, which results in three types of responses: errors, hints and notes.</p> <p>Clicking the Validate button performs the verification at error level. In that case the report may only contains errors, but not hints and notes.</p> <p>To obtain hints and notes, expand the Validate menu and select the entry corresponding to the desired level: \"Include hints\" or \"Include hints and notes\". In all cases, errors are detected.</p> <p> <p>Application Package Validation Menu</p></p> <p>When the validation report is not empty, this is displayed in a popup box. Each entry in the report is associated to the requirement that is not met.</p> <p> <p>Application Package Validation Report</p></p> <p>If the validation report is empty, a notification is displayed stating that the Application Package CWL is valid.</p> <p> <p>Application Package Validation Successful</p></p>"},{"location":"user-manual/#workspace-actions","title":"Workspace Actions","text":"<p>The Workspace Actions are directly responsible for managing and saving the Application Packages of the user in its workspace. Two actions are available:</p> <ul> <li>Manage: The Manage button opens a manager that allows users to     explore and manage the Application Packages saved in their     workspace. Users have the possibility to navigate between     Application Packages and see the different versions of an     Application Package. This manager also provides version specific     actions that allow the user to open, lock, unlock, delete and     download an Application Package version.</li> </ul> <p> <p>Application Package Manager</p></p> <p> <p>Application Package Versions Manager</p></p> <ul> <li>Save: The save button opens a save popup that allows the users     to save the Application Package Generated CWL file in the Workspace.     In this popup, users can change the Application Package Name and the     Version name before performing the save.</li> </ul> <p> <p>Application Package Save Popup</p></p>"},{"location":"user-manual/#local-transfer-actions","title":"Local Transfer Actions","text":"<p>The Local Transfer Actions allow users to manage the Application Packages that are stored in their local storage. Two actions are available:</p> <ul> <li>Upload: The upload button allows users to directly load an     Application Package (CWL file) from their local storage in order to edit     it using the Application Package Editor Tool.</li> <li>Download: The download button allows users to download any     Application Package that is currently open in the Application     Package Editor Tool.</li> </ul>"},{"location":"user-manual/#combining-actions","title":"Combining Actions","text":"<p>The Workspace and Local Transfer actions can be used together which mean that a user can open an Application Package from its local storage but then, after edition, choose to save it directly in its Workspace and vice versa.</p>"},{"location":"user-manual/#editor-section","title":"Editor Section","text":"<p>The Editor Section is the main section of the Application Package Editor Tool and consists of three parts named Metadata, Command Line Tool and Workflow as shown in the next figure. More information about these tabs are available by clicking the information icons next to the tab name.</p>"},{"location":"user-manual/#metadata","title":"Metadata","text":"<p>The Metadata tab of the editor section allows users to enter/edit metadata information about the Application Package such as the CWL version, the creation date, the software version. etc. Some of these metadata are defined in the OGC Best Practice for Earth Observation Application Package.</p> <p>As can be seen in the Editor Metadata Tab figure, users can add authors and contributors for this Application Package as well as the schema and namespace that are used in it.</p> <p> <p>Editor Metadata Tab</p></p>"},{"location":"user-manual/#command-line-tool","title":"Command Line Tool","text":"<p>The Command Line Tool tab of the editor section allows users to add multiple processing tasks with the definition of their executable name, inputs, outputs and requirements that must be met in order to execute the processing task. Initially, a new Application Package has no processing task defined but users can add as many as needed. From this tab, users, as shown in the Editor Command Line Tool Tab figure, can:</p> <ol> <li>Add a Command Line Tool (processing task) to the Application     Package.</li> <li>Define the class of the process, this value is always set to     CommandLineTool in the case of Command Line Tool.</li> <li>An identifier for this processing task, this identifier is unique     and allows users to refer to the added processing task in the     workflow steps.</li> <li>Specifies the program to execute. If defined as an array, the first     element of the array is the command to execute, and subsequent     elements are mandatory command line arguments.</li> <li>Command line bindings which are not directly associated with input     parameters.</li> <li>Add the different inputs of the processing task with their id, type,     default value and input bindings. etc.</li> <li>Add the different outputs of the processing task with their id,     type, and output bindings.</li> <li>Add the different requirements that must be met in order to execute     the processing task, for example, \"DockerRequirement\" can be set if     a docker image is used in this processing task.</li> <li>Remove any Command Line Tool (processing task) that is not useful     anymore to the Application Package.</li> </ol> <p> <p>Editor Command Line Tool Tab</p></p>"},{"location":"user-manual/#workflow","title":"Workflow","text":"<p>The Workflow tab of the editor section allows users to define the inputs, outputs and subprocess steps of the workflow. For each step that is added to the Workflow, the processing task as well as the mapping for its inputs and outputs must be defined by the user. From this tab, users, as shown in the Editor Workflow Tab figure, can:</p> <ol> <li>Define the class of the process, this value is always set to     Workflow in the case of a Workflow process.</li> <li>An identifier for this process, this identifier is unique.</li> <li>Add the different inputs of the workflow process with their id, type     and default value.</li> <li>Add the different outputs of the workflow process with their id,     type, and output source. The output source is the output of one of     its steps.</li> <li>Add the different steps of the workflow process with the processing     task (Command Line Tool) that should be executed and a mapping for     its inputs. Inputs of a processing task are either the inputs     defined at the Workflow level or the outputs of another step     (processing task) if their types match.</li> <li>Add the different requirements that must be met in order to execute     the workflow process.</li> </ol> <p> <p>Editor Workflow Tab</p></p>"},{"location":"user-manual/#viewer-section","title":"Viewer Section","text":"<p>The Viewer Section is focused on showing the corresponding Application Package CWL file that is being generated so that users can have a preview of the result before downloading or saving it. This view of the generated CWL is updated after every action of the user on the editor. Note that the name of the Application Package as well as its version are shown at the top of this section, see the CWL Viewer figure.</p> <p> <p>CWL Viewer</p></p>"},{"location":"user-manual/#glossary","title":"Glossary","text":"<p>In this section you will find the definition of the main concepts used in the EO Application Package Editor.</p> Term Description Earth Observation Applications Application that typically offer functions that perform data operations like processing / reprocessing, projection, visualization or analysis. The applications can be written in a variety of coding languages (e.g. Python, R, Java, C++, C#, shell scripts) and make use of specific software libraries (e.g. SNAP, GDAL, Orfeo Toolbox). Application Package The Application Package is a document that describes the data processing application by providing information about the parameters, software item, executable, dependencies and metadata. This file document ensures that the application is fully portable among all supporting processing scenarios and supports automatic deployment in a Machine-To-Machine scenario. Common Workflow Language The CWL is a set of open standards for describing analysis workflows and tools in a way that makes them portable and scalable across a variety of software and hardware environments, from workstations to cluster, cloud, and high-performance computing (HPC) environments. Command Line Tool An executable, non-interactive program that reads some inputs, performs a computation, and terminates after producing some outputs. Workflow A process characterized by multiple subprocess steps, where a step is a Command Line Tool and its outputs can be connected to the inputs of downstream steps to form a directed acyclic graph."}]}